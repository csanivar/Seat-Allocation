import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

public class MeritOrderAdmission{
	static String program_tokens[] = {"GE","OBC","SC","ST","GE-PD","OBC-PD","SC-PD","ST-PD"};
	static HashMap<String,VirtualProgramme> allVirtualPrograms= new HashMap<String,VirtualProgramme>();
	static HashMap<String,Candidate> allCandidates = new HashMap<String,Candidate>();
	static HashMap<String,MeritList> allRankLists  = new HashMap<String,MeritList>();
	
	public MeritOrderAdmission() throws FileNotFoundException{
		for(int i=0;i<8;i++){
			MeritList tempMeritList = new MeritList();
			allRankLists.put(program_tokens[i],tempMeritList);
		}
		readPrograms();
		readChoices();
		readRankList();
	}
	void runAlgorithm(){
		allotSeats();
		changeQuotasAfterDereservation();
		prepareStudentsForDereservation();
		allotSeats();
	}
	void printAllotedSeats() throws FileNotFoundException, UnsupportedEncodingException{
		Set<String> temp = allCandidates.keySet();
		String[] temp2 = temp.toArray(new String[temp.size()]);
		PrintWriter writer = new PrintWriter("meritOrderOutput.csv", "UTF-8");
		writer.println("CandidateUniqueID,ProgrammeID");
		for(String id : temp2){
			Candidate candidate = allCandidates.get(id);
			if(candidate.alloted_vp!=-1) {
				writer.println(candidate.id+","+candidate.virtual_pl.get(candidate.alloted_vp));
			}
			else writer.println(candidate.id+","+"-1");
		}
		writer.close();
	}
	private static void readPrograms() throws FileNotFoundException{
        BufferedReader fileReader = null;
        try
        {
            String line = "";
            fileReader = new BufferedReader(new FileReader("programs.csv"));
            line = fileReader.readLine();
            while ((line = fileReader.readLine()) != null)
            {
                String[] tokens = line.split(",");
                for(int i=0;i<program_tokens.length;i++)
                {
                	VirtualProgramme tempVPL = new VirtualProgramme();
                	tempVPL.setQuota(Integer.valueOf(tokens[i+3]));
                	tempVPL.setCategory(program_tokens[i]);
                	allVirtualPrograms.put(tokens[1]+"-"+program_tokens[i],tempVPL);
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        } 
	}
	private static void readChoices(){
		BufferedReader fileReader = null;
		try{
			String line ="";
			fileReader = new BufferedReader(new FileReader("choices.csv"));
            line = fileReader.readLine();
			while((line = fileReader.readLine()) != null){
				String[] tokens = line.split(",");
				Candidate tempCandidate = new Candidate();
				tempCandidate.setID(tokens[0]);
				tempCandidate.setCategory(tokens[1]);
				tempCandidate.setPDStatus(tokens[2]);
				tempCandidate.setPL(tokens[3]);
			/*	for(int i=0;i<tempCandidate.virtual_pl.size();i++){
					System.out.print(tempCandidate.virtual_pl.get(i));
					System.out.print(" ");
				}
				System.out.println(); */
				allCandidates.put(tokens[0],tempCandidate);
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	private static void readRankList(){
		BufferedReader fileReader = null;
		try{
			String line ="";
			fileReader = new BufferedReader(new FileReader("ranklist.csv"));
            line = fileReader.readLine();
			while((line = fileReader.readLine()) != null){
				String[] tokens = line.split(",");
				Candidate candidate = allCandidates.get(tokens[0]);
				String candidate_category = candidate.getCategory().toLowerCase();
				candidate.ge_rank = Integer.valueOf(tokens[3]);
				candidate.ge_pd_rank = Integer.valueOf(tokens[8]);
				switch (candidate_category){
					case "obc" : candidate.cat_rank = Integer.valueOf(tokens[4]);
								 candidate.cat_pd_rank = Integer.valueOf(tokens[9]);
								 break;
					case "sc" : candidate.cat_rank = Integer.valueOf(tokens[5]);
					 			 candidate.cat_pd_rank = Integer.valueOf(tokens[10]);
					 			 break;
					case "st" : candidate.cat_rank = Integer.valueOf(tokens[6]);
					 			 candidate.cat_pd_rank = Integer.valueOf(tokens[11]);
					 			 break;
				}
				candidate.makeActualVPL();
				allCandidates.put(candidate.getID(), candidate);
				for(int i=0;i<4;i++){
					MeritList tempMeritList = allRankLists.get(program_tokens[i]);
					if(!tokens[i+3].equals("0")){
						tempMeritList.putCandidate(tokens[0], tokens[i+3]);
						allRankLists.put(program_tokens[i], tempMeritList);
					}
				}
				for(int i=4;i<8;i++){
					MeritList tempMeritList = allRankLists.get(program_tokens[i]);
					if(!tokens[i+4].equals("0")){
						tempMeritList.putCandidate(tokens[0], tokens[i+4]);
						allRankLists.put(program_tokens[i], tempMeritList);
					}
				}
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private static void allotSeats(){
		for(int i=0;i<program_tokens.length;i++){
			MeritList merit_list = allRankLists.get(program_tokens[i]);
			int highest_rank = merit_list.getHighestRank();
			for(int j=0;j<=highest_rank;j++){
				if(merit_list.rank_list.containsKey(j)){
					ArrayList<String> candidate_ids = merit_list.rank_list.get(j);
					for(int k=0;k<candidate_ids.size();k++){
						String candidate_id = candidate_ids.get(k);
						Candidate candidate = allCandidates.get(candidate_id);
						if(candidate.alloted_vp==-1 && !candidate.category.equals("F")){
							ArrayList<String> preferences = candidate.virtual_pl;
							for(int n=0;n<preferences.size();n++){
								VirtualProgramme virtual_programme = allVirtualPrograms.get(preferences.get(n));
							    if(virtual_programme.wait_list.size()<virtual_programme.quota){
									virtual_programme.addCadidateToWaitList(candidate);
									virtual_programme.highest_rank = j;
									candidate.setAllotedVP(n);
									break;
								}
							    else if(virtual_programme.wait_list.size()==virtual_programme.quota && checkIfSameRank(candidate,virtual_programme)){
									virtual_programme.addCadidateToWaitList(candidate);
									candidate.setAllotedVP(n);
									virtual_programme.highest_rank = j;
									break;
								}
							}
						}
					}
				}
			}
		}
		Set<String> temp = allCandidates.keySet();
		String[] temp2 = temp.toArray(new String[temp.size()]);
	}
	
	public static boolean checkIfSameRank(Candidate candidate,VirtualProgramme virtual_program){
		Candidate last_alloted_candidate = virtual_program.wait_list.get(virtual_program.wait_list.size()-1);
		String category = virtual_program.getCategory();
		if(category.equals("GE") && candidate.ge_rank==last_alloted_candidate.ge_rank) return true;
		else if(category.equals("GE-PD") && candidate.ge_pd_rank==last_alloted_candidate.ge_pd_rank) return true;
		else if((category.equals("OBC") || category.equals("SC") || category.equals("ST")) && candidate.cat_rank==last_alloted_candidate.cat_rank) return true;
		else if((category.equals("OBC-PD") || category.equals("SC-PD") || category.equals("ST-PD")) && candidate.cat_pd_rank==last_alloted_candidate.cat_pd_rank) return true;
		return false;
	}
	
	public static void changeQuotasAfterDereservation(){
		Set<String> temp_vpl_names = allVirtualPrograms.keySet();
		String[] vpl_names = temp_vpl_names.toArray(new String[temp_vpl_names.size()]);
		for(int k=0;k<vpl_names.length;k++){
			VirtualProgramme virtual_program = allVirtualPrograms.get(vpl_names[k]);
			int diff = virtual_program.quota - virtual_program.wait_list.size();;
			if(diff>0 && virtual_program.getCategory().equals("OBC")){
				String tokens[] = vpl_names[k].split("-");
				VirtualProgramme temp_vp = allVirtualPrograms.get(tokens[0]+"-GE");
				temp_vp.quota += diff;
				virtual_program.quota -= diff;
			}
			else if(diff>0 && virtual_program.getCategory().equals("GE-PD")){
				String tokens[] = vpl_names[k].split("-");
				VirtualProgramme temp_vp = allVirtualPrograms.get(tokens[0]+"-GE");
				temp_vp.quota += diff;
				virtual_program.quota -= diff;
			}
			else if(diff>0 && virtual_program.getCategory().equals("OBC-PD")){
				String tokens[] = vpl_names[k].split("-");
				VirtualProgramme temp_vp = allVirtualPrograms.get(tokens[0]+"-GE");
				temp_vp.quota += diff;
				virtual_program.quota -= diff;
			}
			else if(diff>0 && virtual_program.getCategory().equals("SC-PD")){
				String tokens[] = vpl_names[k].split("-");
				VirtualProgramme temp_vp = allVirtualPrograms.get(tokens[0]+"-SC");
				temp_vp.quota += diff;
				virtual_program.quota -= diff;
			}
			else if(diff>0 && virtual_program.getCategory().equals("ST-PD")){
				String tokens[] = vpl_names[k].split("-");
				VirtualProgramme temp_vp = allVirtualPrograms.get(tokens[0]+"-ST");
				temp_vp.quota += diff;
				virtual_program.quota -= diff;
			}
		}
	}
	
	private static void prepareStudentsForDereservation(){
		Set<String> temp_candidates_id = allCandidates.keySet();
		String[] candidates_id = temp_candidates_id.toArray(new String[temp_candidates_id.size()]);
		for(String id : candidates_id){
			Candidate candidate = allCandidates.get(id);
			if(candidate.alloted_vp == -1){
				candidate.current_vp = 0;
				candidate.next_vp = 0;
			}
		}
	}
}